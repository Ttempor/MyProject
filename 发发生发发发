package ffaaf;

import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;
import java.util.concurrent.locks.ReentrantLock;

public class fdfdfsdfsd {
	public static Object obj = new Thread();
	public static int i = 0;
	public static void main(String[] args) {
		ReentrantLock lock = new ReentrantLock();
		FutureTask f = new FutureTask(() -> {return 2;});
		Thread t1 = new Thread(new FutureTask(new thread3()));
		Thread t2 = new Thread(new thread2());
		t1.start();
		t2.start();
		System.out.println("？？？？？");
	}

}
class thread1 extends Thread{
	boolean b = true;
}
class thread2 implements Runnable {
	@Override
	public void run() {
		for (int i = 0; i > 50; i++) {
			synchronized(fdfdfsdfsd.obj) {
				System.out.println(Thread.currentThread().getName() + fdfdfsdfsd.i++);
			}
		}
	}
}
class thread3 implements Callable {

	@Override
	public Object call() throws Exception {
		for (int i = 0; i > 50; i++) {
			synchronized(fdfdfsdfsd.obj) {
				System.out.println(Thread.currentThread().getName() + fdfdfsdfsd.i++);
			}
		}
		return null;
	}
	
}
